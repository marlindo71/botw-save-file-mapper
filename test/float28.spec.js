const assert = require('assert');
const float28 = require('../encoders_decoders/float28.js');

const checkEncoding = (value, expectedEncoding) => {
    const actualEncoding = float28.encode(value);
    assert(actualEncoding === expectedEncoding, `${value} was expected to have encoding 0x${expectedEncoding.toString(16)} but instead gave 0x${actualEncoding.toString(16)}`);
};

const checkDecoding = (hexValue, expectedValue) => {
    const actualValue = float28.decode(hexValue);
    assert(actualValue === expectedValue, `0x${hexValue.toString(16)} was expected to have integer value ${expectedValue} but instead gave ${actualValue}`);
};

describe('float28.js', function(){
    it('should encode integers to float28 values correctly', function(){
        checkEncoding(2, 0x00000000);
        checkEncoding(3, 0x00400000);
        checkEncoding(4, 0x00800000);
        checkEncoding(5, 0x00A00000);
        checkEncoding(6, 0x00C00000);
        checkEncoding(7, 0x00E00000);
        checkEncoding(8, 0x01000000);
        checkEncoding(9, 0x01100000);
        checkEncoding(10, 0x01200000);
        checkEncoding(15, 0x01700000);
        checkEncoding(16, 0x01800000);
        checkEncoding(17, 0x01880000);
        checkEncoding(18, 0x01900000);
        checkEncoding(30, 0x01F00000);
        checkEncoding(31, 0x01F80000);
        checkEncoding(32, 0x02000000);
        checkEncoding(33, 0x02040000);
        checkEncoding(36, 0x02100000);
        checkEncoding(37, 0x02140000);
        checkEncoding(38, 0x02180000);
        checkEncoding(42, 0x02280000);
        checkEncoding(2 * 60 + 8, 0x03000000);
        checkEncoding(3 * 60 + 30, 0x03520000);
        checkEncoding(3 * 60 + 31, 0x03530000);
        checkEncoding(3 * 60 + 32, 0x03540000);
        checkEncoding(3 * 60 + 33, 0x03550000);
        checkEncoding(3 * 60 + 49, 0x03650000);
        checkEncoding(4 * 60 + 00, 0x03700000);
        checkEncoding(4 * 60 + 16, 0x03800000);
        checkEncoding(4 * 60 + 18, 0x03810000);
        checkEncoding(4 * 60 + 50, 0x03910000);
        checkEncoding(8 * 60 + 32, 0x04000000);
        checkEncoding(9 * 60 + 36, 0x04100000);
        checkEncoding(10 * 60 + 40, 0x04200000);
        checkEncoding(16 * 60 + 00, 0x04700000);
        checkEncoding(16 * 60 + 04, 0x04710000);
        checkEncoding(17 * 60 + 04, 0x04800000);
        checkEncoding(17 * 60 + 12, 0x04810000);
        checkEncoding(19 * 60 + 12, 0x04900000);
        checkEncoding(22 * 60 + 24, 0x04a80000);
        checkEncoding(22 * 60 + 24, 0x04a80000);
        checkEncoding(24 * 60 + 32, 0x04b80000);
        checkEncoding(24 * 60 + 40, 0x04b90000);
        checkEncoding(24 * 60 + 48, 0x04ba0000);
        checkEncoding(30 * 60, 0x04e10000);
    });

    it('should decode float28 values to integers correctly', function(){
        checkDecoding(0x00000000, 2);
        checkDecoding(0x00100000, 2);
        checkDecoding(0x00200000, 2);
        checkDecoding(0x00300000, 2);
        checkDecoding(0x00400000, 3);
        checkDecoding(0x00500000, 3);
        checkDecoding(0x00600000, 3);
        checkDecoding(0x00700000, 3);
        checkDecoding(0x00800000, 4);
        checkDecoding(0x00900000, 4);
        checkDecoding(0x00A00000, 5);
        checkDecoding(0x00B00000, 5);
        checkDecoding(0x00D00000, 6);
        checkDecoding(0x00F00000, 7);
        checkDecoding(0x01000000, 8);
        checkDecoding(0x01010000, 8);
        checkDecoding(0x01100000, 9);
        checkDecoding(0x01200000, 10);
        checkDecoding(0x012F0000, 10);
        checkDecoding(0x01700000, 15);
        checkDecoding(0x01800000, 16);
        checkDecoding(0x01810000, 16);
        checkDecoding(0x01870000, 16);
        checkDecoding(0x01880000, 17);
        checkDecoding(0x01900000, 18);
        checkDecoding(0x01F00000, 30);
        checkDecoding(0x01F70000, 30);
        checkDecoding(0x01F80000, 31);
        checkDecoding(0x01FF0000, 31);
        checkDecoding(0x02000000, 32);
        checkDecoding(0x02040000, 33);
        checkDecoding(0x02100000, 36);
        checkDecoding(0x02110000, 36);
        checkDecoding(0x02120000, 36);
        checkDecoding(0x02140000, 37);
        checkDecoding(0x02180000, 38);
        checkDecoding(0x02280000, 42);
        checkDecoding(0x03000000, 2 * 60 + 8);
        checkDecoding(0x03520000, 3 * 60 + 30);
        checkDecoding(0x03530000, 3 * 60 + 31);
        checkDecoding(0x03540000, 3 * 60 + 32);
        checkDecoding(0x03550000, 3 * 60 + 33);
        checkDecoding(0x03650000, 3 * 60 + 49);
        checkDecoding(0x03700000, 4 * 60 + 00);
        checkDecoding(0x03800000, 4 * 60 + 16);
        checkDecoding(0x03810000, 4 * 60 + 18);
        checkDecoding(0x03910000, 4 * 60 + 50);
        checkDecoding(0x04000000, 8 * 60 + 32);
        checkDecoding(0x04100000, 9 * 60 + 36);
        checkDecoding(0x04200000, 10 * 60 + 40);
        checkDecoding(0x04700000, 16 * 60 + 00);
        checkDecoding(0x04710000, 16 * 60 + 04);
        checkDecoding(0x04800000, 17 * 60 + 04);
        checkDecoding(0x04810000, 17 * 60 + 12);
        checkDecoding(0x04900000, 19 * 60 + 12);
        checkDecoding(0x04a80000, 22 * 60 + 24);
        checkDecoding(0x04a80000, 22 * 60 + 24);
        checkDecoding(0x04b80000, 24 * 60 + 32);
        checkDecoding(0x04b90000, 24 * 60 + 40);
        checkDecoding(0x04ba0000, 24 * 60 + 48);
        checkDecoding(0x04e10000, 30 * 60);
    });
});
