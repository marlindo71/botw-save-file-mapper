const assert = require('assert');
const float32 = require('../encoders_decoders/float32.js');

const checkEncoding = (value, expectedEncoding) => {
    const actualEncoding = float32.encode(value);
    assert(actualEncoding === expectedEncoding, `${value} was expected to have encoding 0x${expectedEncoding.toString(16)} but instead gave 0x${actualEncoding.toString(16)}`);
};

const checkDecoding = (hexValue, expectedValue) => {
    const actualValue = float32.decode(hexValue);
    assert(actualValue === expectedValue, `0x${hexValue.toString(16)} was expected to have integer value ${expectedValue} but instead gave ${actualValue}`);
};

describe('float32.js', function(){
    it('should encode integers to float32 values correctly', function(){
        checkEncoding(2, 0x40000000);
        checkEncoding(3, 0x40400000);
        checkEncoding(4, 0x40800000);
        checkEncoding(5, 0x40A00000);
        checkEncoding(6, 0x40C00000);
        checkEncoding(7, 0x40E00000);
        checkEncoding(8, 0x41000000);
        checkEncoding(9, 0x41100000);
        checkEncoding(10, 0x41200000);
        checkEncoding(15, 0x41700000);
        checkEncoding(16, 0x41800000);
        checkEncoding(17, 0x41880000);
        checkEncoding(18, 0x41900000);
        checkEncoding(30, 0x41F00000);
        checkEncoding(31, 0x41F80000);
        checkEncoding(32, 0x42000000);
        checkEncoding(33, 0x42040000);
        checkEncoding(36, 0x42100000);
        checkEncoding(37, 0x42140000);
        checkEncoding(38, 0x42180000);
        checkEncoding(42, 0x42280000);
        checkEncoding(2 * 60 + 8, 0x43000000);
        checkEncoding(3 * 60 + 30, 0x43520000);
        checkEncoding(3 * 60 + 31, 0x43530000);
        checkEncoding(3 * 60 + 32, 0x43540000);
        checkEncoding(3 * 60 + 33, 0x43550000);
        checkEncoding(3 * 60 + 49, 0x43650000);
        checkEncoding(4 * 60 + 00, 0x43700000);
        checkEncoding(4 * 60 + 16, 0x43800000);
        checkEncoding(4 * 60 + 18, 0x43810000);
        checkEncoding(4 * 60 + 50, 0x43910000);
        checkEncoding(8 * 60 + 32, 0x44000000);
        checkEncoding(9 * 60 + 36, 0x44100000);
        checkEncoding(10 * 60 + 40, 0x44200000);
        checkEncoding(16 * 60 + 00, 0x44700000);
        checkEncoding(16 * 60 + 04, 0x44710000);
        checkEncoding(17 * 60 + 04, 0x44800000);
        checkEncoding(17 * 60 + 12, 0x44810000);
        checkEncoding(19 * 60 + 12, 0x44900000);
        checkEncoding(22 * 60 + 24, 0x44a80000);
        checkEncoding(22 * 60 + 24, 0x44a80000);
        checkEncoding(24 * 60 + 32, 0x44b80000);
        checkEncoding(24 * 60 + 40, 0x44b90000);
        checkEncoding(24 * 60 + 48, 0x44ba0000);
        checkEncoding(30 * 60, 0x44e10000);
    });

    it('should decode float32 values to integers correctly', function(){
        checkDecoding(0x40000000, 2);
        checkDecoding(0x40100000, 2);
        checkDecoding(0x40200000, 2);
        checkDecoding(0x40300000, 2);
        checkDecoding(0x40400000, 3);
        checkDecoding(0x40500000, 3);
        checkDecoding(0x40600000, 3);
        checkDecoding(0x40700000, 3);
        checkDecoding(0x40800000, 4);
        checkDecoding(0x40900000, 4);
        checkDecoding(0x40A00000, 5);
        checkDecoding(0x40B00000, 5);
        checkDecoding(0x40D00000, 6);
        checkDecoding(0x40F00000, 7);
        checkDecoding(0x41000000, 8);
        checkDecoding(0x41010000, 8);
        checkDecoding(0x41100000, 9);
        checkDecoding(0x41200000, 10);
        checkDecoding(0x412F0000, 10);
        checkDecoding(0x41700000, 15);
        checkDecoding(0x41800000, 16);
        checkDecoding(0x41810000, 16);
        checkDecoding(0x41870000, 16);
        checkDecoding(0x41880000, 17);
        checkDecoding(0x41900000, 18);
        checkDecoding(0x41F00000, 30);
        checkDecoding(0x41F70000, 30);
        checkDecoding(0x41F80000, 31);
        checkDecoding(0x41FF0000, 31);
        checkDecoding(0x42000000, 32);
        checkDecoding(0x42040000, 33);
        checkDecoding(0x42100000, 36);
        checkDecoding(0x42110000, 36);
        checkDecoding(0x42120000, 36);
        checkDecoding(0x42140000, 37);
        checkDecoding(0x42180000, 38);
        checkDecoding(0x42280000, 42);
        checkDecoding(0x43000000, 2 * 60 + 8);
        checkDecoding(0x43520000, 3 * 60 + 30);
        checkDecoding(0x43530000, 3 * 60 + 31);
        checkDecoding(0x43540000, 3 * 60 + 32);
        checkDecoding(0x43550000, 3 * 60 + 33);
        checkDecoding(0x43650000, 3 * 60 + 49);
        checkDecoding(0x43700000, 4 * 60 + 00);
        checkDecoding(0x43800000, 4 * 60 + 16);
        checkDecoding(0x43810000, 4 * 60 + 18);
        checkDecoding(0x43910000, 4 * 60 + 50);
        checkDecoding(0x44000000, 8 * 60 + 32);
        checkDecoding(0x44100000, 9 * 60 + 36);
        checkDecoding(0x44200000, 10 * 60 + 40);
        checkDecoding(0x44700000, 16 * 60 + 00);
        checkDecoding(0x44710000, 16 * 60 + 04);
        checkDecoding(0x44800000, 17 * 60 + 04);
        checkDecoding(0x44810000, 17 * 60 + 12);
        checkDecoding(0x44900000, 19 * 60 + 12);
        checkDecoding(0x44a80000, 22 * 60 + 24);
        checkDecoding(0x44a80000, 22 * 60 + 24);
        checkDecoding(0x44b80000, 24 * 60 + 32);
        checkDecoding(0x44b90000, 24 * 60 + 40);
        checkDecoding(0x44ba0000, 24 * 60 + 48);
        checkDecoding(0x44e10000, 30 * 60);
    });
});
