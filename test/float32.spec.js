const assert = require('assert');
const float32 = require('../encoders_decoders/float32.js');

const checkEncoding = (value, expectedEncoding) => {
    const actualEncoding = float32.encode(value);
    assert(actualEncoding === expectedEncoding, `${value} was expected to have encoding 0x${expectedEncoding.toString(16)} but instead gave 0x${actualEncoding.toString(16)}`);
};

const checkDecoding = (hexValue, expectedValue) => {
    const actualValue = float32.decode(hexValue);
    assert(actualValue === expectedValue, `0x${hexValue.toString(16)} was expected to have value ${expectedValue} but instead gave ${actualValue}`);
};

const checkDecodingInt = (hexValue, expectedValue) => {
    const actualValue = float32.decodeAsInt(hexValue);
    assert(actualValue === expectedValue, `0x${hexValue.toString(16)} was expected to have integer value ${expectedValue} but instead gave ${actualValue}`);
};

describe('float32.js', function(){
    it('should encode integers to float32 values correctly', function(){
        checkEncoding(0, 0x00000000);
        checkEncoding(2, 0x40000000);
        checkEncoding(3, 0x40400000);
        checkEncoding(4, 0x40800000);
        checkEncoding(5, 0x40A00000);
        checkEncoding(6, 0x40C00000);
        checkEncoding(7, 0x40E00000);
        checkEncoding(8, 0x41000000);
        checkEncoding(9, 0x41100000);
        checkEncoding(10, 0x41200000);
        checkEncoding(15, 0x41700000);
        checkEncoding(16, 0x41800000);
        checkEncoding(17, 0x41880000);
        checkEncoding(18, 0x41900000);
        checkEncoding(30, 0x41F00000);
        checkEncoding(31, 0x41F80000);
        checkEncoding(32, 0x42000000);
        checkEncoding(33, 0x42040000);
        checkEncoding(36, 0x42100000);
        checkEncoding(37, 0x42140000);
        checkEncoding(38, 0x42180000);
        checkEncoding(42, 0x42280000);
        checkEncoding(128, 0x43000000);
        checkEncoding(210, 0x43520000);
        checkEncoding(211, 0x43530000);
        checkEncoding(212, 0x43540000);
        checkEncoding(213, 0x43550000);
        checkEncoding(229, 0x43650000);
        checkEncoding(240, 0x43700000);
        checkEncoding(256, 0x43800000);
        checkEncoding(258, 0x43810000);
        checkEncoding(290, 0x43910000);
        checkEncoding(512, 0x44000000);
        checkEncoding(576, 0x44100000);
        checkEncoding(640, 0x44200000);
        checkEncoding(960, 0x44700000);
        checkEncoding(964, 0x44710000);
        checkEncoding(1024, 0x44800000);
        checkEncoding(1032, 0x44810000);
        checkEncoding(1152, 0x44900000);
        checkEncoding(1344, 0x44a80000);
        checkEncoding(1472, 0x44b80000);
        checkEncoding(1480, 0x44b90000);
        checkEncoding(1488, 0x44ba0000);
        checkEncoding(1800, 0x44e10000);
    });

    it('should decode float32 values to floats correctly', function(){
        checkDecoding(0x00000000, 0);
        checkDecoding(0x40000000, 2);
        checkDecoding(0x40100000, 2.25);
        checkDecoding(0x40200000, 2.5);
        checkDecoding(0x40300000, 2.75);
        checkDecoding(0x40400000, 3);
        checkDecoding(0x40500000, 3.25);
        checkDecoding(0x40600000, 3.5);
        checkDecoding(0x40700000, 3.75);
        checkDecoding(0x40800000, 4);
        checkDecoding(0x40900000, 4.5);
        checkDecoding(0x40A00000, 5);
        checkDecoding(0x40B00000, 5.5);
        checkDecoding(0x40D00000, 6.5);
        checkDecoding(0x40F00000, 7.5);
        checkDecoding(0x41000000, 8);
        checkDecoding(0x41010000, 8.0625);
        checkDecoding(0x41100000, 9);
        checkDecoding(0x41200000, 10);
        checkDecoding(0x412F0000, 10.9375);
        checkDecoding(0x41700000, 15);
        checkDecoding(0x41800000, 16);
        checkDecoding(0x41810000, 16.125);
        checkDecoding(0x41870000, 16.875);
        checkDecoding(0x41880000, 17);
        checkDecoding(0x41900000, 18.0);
        checkDecoding(0x41F00000, 30);
        checkDecoding(0x41F70000, 30.875);
        checkDecoding(0x41F80000, 31);
        checkDecoding(0x41FF0000, 31.875);
        checkDecoding(0x42000000, 32);
        checkDecoding(0x42040000, 33);
        checkDecoding(0x42100000, 36);
        checkDecoding(0x42110000, 36.25);
        checkDecoding(0x42120000, 36.5);
        checkDecoding(0x42140000, 37);
        checkDecoding(0x42180000, 38);
        checkDecoding(0x42280000, 42);
        checkDecoding(0x43000000, 128);
        checkDecoding(0x43520000, 210);
        checkDecoding(0x43530000, 211);
        checkDecoding(0x43540000, 212);
        checkDecoding(0x43550000, 213);
        checkDecoding(0x43650000, 229);
        checkDecoding(0x43700000, 240);
        checkDecoding(0x43800000, 256);
        checkDecoding(0x43810000, 258);
        checkDecoding(0x43910000, 290);
        checkDecoding(0x44000000, 512);
        checkDecoding(0x44100000, 576);
        checkDecoding(0x44200000, 640);
        checkDecoding(0x44700000, 960);
        checkDecoding(0x44710000, 964);
        checkDecoding(0x44800000, 1024);
        checkDecoding(0x44810000, 1032);
        checkDecoding(0x44900000, 1152);
        checkDecoding(0x44a80000, 1344);
        checkDecoding(0x44b80000, 1472);
        checkDecoding(0x44b90000, 1480);
        checkDecoding(0x44ba0000, 1488);
        checkDecoding(0x44e10000, 1800);
    });

    it('should decode float32 values to integers correctly', function(){
        checkDecodingInt(0x00000000, 0);
        checkDecodingInt(0x40000000, 2);
        checkDecodingInt(0x40100000, 2);
        checkDecodingInt(0x40200000, 2);
        checkDecodingInt(0x40300000, 2);
        checkDecodingInt(0x40400000, 3);
        checkDecodingInt(0x40500000, 3);
        checkDecodingInt(0x40600000, 3);
        checkDecodingInt(0x40700000, 3);
        checkDecodingInt(0x40800000, 4);
        checkDecodingInt(0x40900000, 4);
        checkDecodingInt(0x40A00000, 5);
        checkDecodingInt(0x40B00000, 5);
        checkDecodingInt(0x40D00000, 6);
        checkDecodingInt(0x40F00000, 7);
        checkDecodingInt(0x41000000, 8);
        checkDecodingInt(0x41010000, 8);
        checkDecodingInt(0x41100000, 9);
        checkDecodingInt(0x41200000, 10);
        checkDecodingInt(0x412F0000, 10);
        checkDecodingInt(0x41700000, 15);
        checkDecodingInt(0x41800000, 16);
        checkDecodingInt(0x41810000, 16);
        checkDecodingInt(0x41870000, 16);
        checkDecodingInt(0x41880000, 17);
        checkDecodingInt(0x41900000, 18);
        checkDecodingInt(0x41F00000, 30);
        checkDecodingInt(0x41F70000, 30);
        checkDecodingInt(0x41F80000, 31);
        checkDecodingInt(0x41FF0000, 31);
        checkDecodingInt(0x42000000, 32);
        checkDecodingInt(0x42040000, 33);
        checkDecodingInt(0x42100000, 36);
        checkDecodingInt(0x42110000, 36);
        checkDecodingInt(0x42120000, 36);
        checkDecodingInt(0x42140000, 37);
        checkDecodingInt(0x42180000, 38);
        checkDecodingInt(0x42280000, 42);
        checkDecodingInt(0x43000000, 128);
        checkDecodingInt(0x43520000, 210);
        checkDecodingInt(0x43530000, 211);
        checkDecodingInt(0x43540000, 212);
        checkDecodingInt(0x43550000, 213);
        checkDecodingInt(0x43650000, 229);
        checkDecodingInt(0x43700000, 240);
        checkDecodingInt(0x43800000, 256);
        checkDecodingInt(0x43810000, 258);
        checkDecodingInt(0x43910000, 290);
        checkDecodingInt(0x44000000, 512);
        checkDecodingInt(0x44100000, 576);
        checkDecodingInt(0x44200000, 640);
        checkDecodingInt(0x44700000, 960);
        checkDecodingInt(0x44710000, 964);
        checkDecodingInt(0x44800000, 1024);
        checkDecodingInt(0x44810000, 1032);
        checkDecodingInt(0x44900000, 1152);
        checkDecodingInt(0x44a80000, 1344);
        checkDecodingInt(0x44b80000, 1472);
        checkDecodingInt(0x44b90000, 1480);
        checkDecodingInt(0x44ba0000, 1488);
        checkDecodingInt(0x44e10000, 1800);
    });
});
